generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id            Int         @id @default(autoincrement())
  nombre        String
  email         String      @unique
  password      String
  rol           Rol
  creadoEn      DateTime    @default(now())
  actualizadoEn DateTime    @updatedAt
  director      Director?
  empresa       Empresa?
  estudiante    Estudiante?
}

model Director {
  id                Int        @id @default(autoincrement())
  usuarioId         Int        @unique
  programaId        Int        @unique
  Facultad          String?
  usuario           Usuario    @relation(fields: [usuarioId], references: [id])
  programa          Programa   @relation(fields: [programaId], references: [id])
  convenios         Convenio[]
  reportes          Reporte[]
  vacantesValidadas Vacante[]
}

model Programa {
  id         Int         @id @default(autoincrement())
  nombre     String       @unique
  facultad   String
  directores Director[]
}

model Estudiante {
  id          Int        @id @default(autoincrement())
  usuarioId   Int        @unique
  habilidades String?
  perfil      String?
  usuario     Usuario    @relation(fields: [usuarioId], references: [id])
  practicas   Practica[]
}

model Empresa {
  id           Int          @id @default(autoincrement())
  usuarioId    Int          @unique
  nombre       String
  nit          String
  convenios    Convenio[]
  usuario      Usuario      @relation(fields: [usuarioId], references: [id])
  evaluaciones Evaluacion[]
  vacantes     Vacante[]
}

model Convenio {
  id            Int            @id @default(autoincrement())
  empresaId     Int
  directorId    Int
  nombre        String
  estado        EstadoConvenio
  actualizadoEn DateTime       @updatedAt
  archivoUrl    String?
  director      Director       @relation(fields: [directorId], references: [id])
  empresa       Empresa        @relation(fields: [empresaId], references: [id])
}

model Vacante {
  id               Int           @id @default(autoincrement())
  empresaId        Int
  directorValidaId Int?
  titulo           String
  descripcion      String
  area             String
  requisitos       String?
  estado           EstadoVacante @default(PENDIENTE)
  creadaEn         DateTime      @default(now())
  practicas        Practica[]
  directorValida   Director?     @relation(fields: [directorValidaId], references: [id])
  empresa          Empresa       @relation(fields: [empresaId], references: [id])
}

enum EstadoVacante {
  PENDIENTE
  APROBADA
  RECHAZADA
}

model Practica {
  id           Int            @id @default(autoincrement())
  estudianteId Int
  vacanteId    Int
  estado       EstadoPractica @default(EN_PROCESO)
  inicio       DateTime?
  fin          DateTime?
  evaluacion   Evaluacion?
  estudiante   Estudiante     @relation(fields: [estudianteId], references: [id])
  vacante      Vacante        @relation(fields: [vacanteId], references: [id])
}

model Evaluacion {
  id           Int      @id @default(autoincrement())
  practicaId   Int      @unique
  empresaId    Int
  calificacion Int
  observacion  String?
  fecha        DateTime @default(now())
  empresa      Empresa  @relation(fields: [empresaId], references: [id])
  practica     Practica @relation(fields: [practicaId], references: [id])
}

model Reporte {
  id          Int      @id @default(autoincrement())
  directorId  Int
  titulo      String
  descripcion String?
  fecha       DateTime @default(now())
  director    Director @relation(fields: [directorId], references: [id])
}

enum Rol {
  ADMIN
  DIRECTOR
  ESTUDIANTE
  EMPRESA
}

enum EstadoPractica {
  EN_PROCESO
  FINALIZADA
  CANCELADA
}

enum EstadoConvenio {
  ACTIVO
  PENDIENTE
  CANCELADO
  RECHAZADO
}
